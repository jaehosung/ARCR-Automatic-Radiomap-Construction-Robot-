#!/usr/bin/env python
#       
# License: BSD
#   https://raw.github.com/yujinrobot/kobuki/hydro-devel/kobuki_testsuite/LICENSE
#
##############################################################################
# Imports
##############################################################################

import math
import rospy
import roslib; roslib.load_manifest('kobuki_testsuite')

from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
from kobuki_msgs.msg import CliffEvent


from tf.transformations import euler_from_quaternion
from math import degrees
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Quaternion

import sys
# Local imports

##############################################################################
# Classes
##############################################################################
    
'''
  Travels forward a set distance. 

      API:
        init(speed,distance) : (re)initialise parameters 
        stop()  - stop.
        execute() - pass this to a thread to run
        shutdown() - cleanup
'''
class TravelForward(object):
    '''
      Initialise everything
      
      @param topic names
      @type strings
    '''
    def __init__(self, cmd_vel_topic, odom_topic, cliff_sensor_topic):
	self.gyro_sensor_subscriber = rospy.Subscriber("/mobile_base/sensors/imu_data", Imu, self.ImuCallback)
        self.odom_subscriber = rospy.Subscriber(odom_topic, Odometry, self.odometry_callback)
        self.cmd_vel_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)
        self.cliff_sensor_subscriber = rospy.Subscriber(cliff_sensor_topic, CliffEvent , self.cliff_sensor_callback)
        self.speed = 0.3
        self.distance = 1.0
	self.angle = 0.0
	self._angle = 0.0
        self._current_pose = Pose()
        self._starting_pose = Pose()
        self._stop = False
        self._running = False	

    def init(self, speed, distance, angle):
	self.speed = speed
        self.distance = distance
	self.angle = angle
        self._starting_pose.position.x = self._current_pose.position.x
	self._starting_pose.position.y = self._current_pose.position.y
	
	#print("=========")
	#print("Goal distance %s"%self.distance)
	#print("Goal angle %s"%self.angle)
	#print("=========")
        
    def shutdown(self):
        self.stop()
        while self._running:
            rospy.sleep(0.05)
        self.cmd_vel_publisher.unregister()
        self.odom_subscriber.unregister()
    
    def stop(self):
        self._stop = True

    def execute(self):
	check = 0
        if self._running:
            rospy.logerr("Kobuki TestSuite: already executing a motion, ignoring the request")
            return
        self._stop = False
        self._running = True
        rate = rospy.Rate(10)
        self._current_speed = 0.0
        current_distance_sq = 0.0
	self._current_angle = 0.0
	state = 0
        distance_sq = self.distance*self.distance
        while not self._stop and not rospy.is_shutdown():

	
	    if check < 2:
		print("checked")
	        self._current_angle = self._angle
                self.angle=(self._current_angle+self.angle+180)%360-180
		check = check + 1
            if current_distance_sq > distance_sq:
		check = 0
                break
            else:
		if state==0:
#_current_angle : previous value
# angle : return from app
			#print("Goal angle %s"%(self.angle))
			if self.speed > 0:
                    		if self._current_speed < self.speed and abs(self.angle-self._angle)>10:
                        		self._current_speed += 0.02
				elif abs(self.angle-self._angle)<10:
					self._current_speed = 0.05
               		else:
                    		if self._current_speed > self.speed:
                        		self._current_speed -= 0.02
			
			cmd = Twist()
			stopFlag =False
			if(self.angle-self._current_angle>0) :
				cmd.angular.z = self._current_speed
				if(self._angle>self.angle) :
					stopFlag = True
			else :
				cmd.angular.z = -self._current_speed
				if(self._angle<self.angle) :
					stopFlag = True

			print("angle : %s  %s"%(self._angle,stopFlag))	
			if(stopFlag) :
				state = 1
				self._current_speed = 0
				cmd.angular.z = 0.0
				self.cmd_vel_publisher.publish(cmd)
				
        			self._starting_pose.position.x = self._current_pose.position.x
				self._starting_pose.position.y = self._current_pose.position.y
				stopFlag = False

			self.cmd_vel_publisher.publish(cmd)
			rate.sleep()
		else:
			#print("Starting Pose %s"%self._starting_pose.position.x)
			#print("Current Pose %s"%self._current_pose.position.x)
                	current_distance_sq = (self._current_pose.position.x - self._starting_pose.position.x)*(self._current_pose.position.x - self._starting_pose.position.x) + \
                                   (self._current_pose.position.y - self._starting_pose.position.y)*(self._current_pose.position.y - self._starting_pose.position.y)
                #current_distance_sq += 0.01 # uncomment this and comment above for debugging
			#print("Goal Distance %s"%math.sqrt(distance_sq))
                	#print("Distance %s"%math.sqrt(current_distance_sq))
			#print("Speed %s"%self._current_speed)
			#print("Angle %s"%self._angle)
                        print("diff angle %s  %s  %s"%(self.angle,self._angle,self._current_angle))
                        # angle : angle to go / _angle : gyro / _current :previous value
			cmd = Twist()
			cmd.angular.z = (self._angle-self.angle)/5
			if(abs(math.sqrt(current_distance_sq)-math.sqrt(distance_sq))<0.5):
				if(self._current_speed>0.1):				
					self._current_speed -= 0.02
				else:
					self._current_speed = 0.1
			else:
                		if self.speed > 0:
                    			if self._current_speed < self.speed:
                        			self._current_speed += 0.01
               			else:
                    			if self._current_speed > self.speed:
                        			self._current_speed -= 0.01
                	
                	cmd.linear.x = self._current_speed
                	self.cmd_vel_publisher.publish(cmd)
            		rate.sleep()
        if not rospy.is_shutdown():
            cmd = Twist()
            cmd.linear.x = 0.0
            cmd.angular.z = 0.0
            self.cmd_vel_publisher.publish(cmd)
        self._running = False
        
    ##########################################################################
    # Ros Callbacks
    ##########################################################################

    def cliff_sensor_callback(self, data):
        rospy.loginfo("Kobuki Testsuite: cliff event on sensor [%s]"%str(data.sensor))
        if data.state == CliffEvent.CLIFF:
            if not rospy.is_shutdown():
                cmd = Twist()
                cmd.linear.x = 0.0
            	cmd.angular.z = 0.0
                self.cmd_vel_publisher.publish(cmd)
            self.stop()
    
    def odometry_callback(self, data):
        self._current_pose = data.pose.pose

    def ImuCallback(self, data):
  	quat = data.orientation
  	q = [quat.x, quat.y, quat.z, quat.w]
  	self.roll, self.pitch, self.yaw = euler_from_quaternion(q)
	self._angle = degrees(self.yaw)
	sys.stdout.flush()
